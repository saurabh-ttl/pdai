import argparse
import pandas as pd
from pandasai.llm import HuggingFaceTextGen
from pandasai import SmartDataframe
from pandasai.connectors import PandasConnector

def load_csv_and_initialize_smart_df():
    llm = HuggingFaceTextGen(
        inference_server_url="http://127.0.0.1:8080"  # Replace with your actual inference server URL
    )
    
    # Load the CSV file from the current directory
    df = pd.read_csv('claim_data.csv')
    
    # Convert date columns to datetime format
    df['TM Invoice Date'] = pd.to_datetime(df['TM Invoice Date'], format='%d-%m-%Y', errors='coerce')
    df['Retail invoice Date'] = pd.to_datetime(df['Retail invoice Date'], format='%d-%m-%Y', errors='coerce')
    df['SAP Doc Date'] = pd.to_datetime(df['SAP Doc Date'], format='%d-%m-%Y', errors='coerce')
    
    # Convert string columns
    df['TMInvoiceno'] = df['TMInvoiceno'].astype(str)
    df['Dealer Code'] = df['Dealer Code'].astype(str)
    df['G_Claim ID'] = df['G_Claim ID'].astype(str)
    
    # Define the field_info dictionary
    field_info = {
    'Dealer Code': 'The unique identifier for each dealer.',
    'Dealer Name': 'The name of the dealer associated with the claim.',
    'Dealer State': 'The state in which the dealer is located.',
    'Region': 'The geographical region of the dealer.',
    'Status': 'The current status of the claim (e.g., Settled, Pending).',
    'Status Reson': 'The reason for the current status of the claim.',
    'Chassis no': 'The unique chassis number of the vehicle associated with the claim.',
    'TMInvoiceno': 'The invoice number issued by the TM (Tata Motors) for the claim.',
    'TM Invoice Date': 'The date on which the TM invoice was issued.',
    'Retail invoice no': 'The invoice number issued by the retailer.',
    'Retail invoice Date': 'The date on which the retail invoice was issued.',
    'Claim ID': 'The unique identifier for the claim.',
    'G_Claim ID': 'The identifier for the group claim, if applicable.',
    'Scheme ID': 'The identifier for the scheme under which the claim is made.',
    'Amount': 'The monetary amount claimed.',
    'SAP Doc no.': 'The document number generated by SAP for the claim.',
    'SAP Doc Date': 'The date on which the SAP document was generated.',
    'Scheme Type': 'The type of scheme under which the claim is made.',
    'Scheme Type-Name': 'The name of the scheme under which the claim is made.',
    'Scheme Type Category': 'The category of the scheme under which the claim is made.',
    'LOB': 'The line of business (LOB) associated with the claim.'
                    } 
    
    # Initialize SmartDataframe with the field_info
    connector = PandasConnector({"original_df": df}, field_descriptions=field_info)
    sdf = SmartDataframe(connector,config={'llm':llm})
    
    return sdf

def ask_question(sdf, query):
    response = sdf.chat(query)
    return response

def main():
    parser = argparse.ArgumentParser(description="Chat with a CSV using PandasAI SmartDataframe")
    parser.add_argument("query", help="Your question to the CSV")
    args = parser.parse_args()

    sdf = load_csv_and_initialize_smart_df()
    response = ask_question(sdf, args.query)
    print(response)

if __name__ == "__main__":
    main()